name: publish
on:
    push:
        branches:
            - main
jobs:
    build:
        name: build ${{ matrix.platform }}
        strategy:
            matrix:
                include:
                    - platform: macos-silicon
                      os: macos-latest
                      target: aarch64-apple-darwin

                    - platform: macos-intel
                      os: macos-latest
                      target: x86_64-apple-darwin

                    - platform: windows
                      os: windows-latest
                      target: x86_64-pc-windows-msvc

                    - platform: linux
                      os: ubuntu-latest
                      target: x86_64-unknown-linux-musl

        runs-on: ${{ matrix.os }}
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: install rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: install cross
              if: matrix.platform == 'linux'
              run: cargo install cross

            - name: build
              run: ${{ matrix.platform == 'linux' && 'cross' || 'cargo' }} build --release --target ${{ matrix.target }}

            - name: prepare artifact
              run: |
                  mkdir -p artifacts
                  tar -czvf artifacts/voulr-${{ matrix.platform }}.tar.gz -C target/${{ matrix.target }}/release ${{ matrix.platform == 'windows' && 'voulr.exe' || 'voulr' }}

            - name: upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.target }}
                  path: artifacts

    publish:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: download artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: get version
              id: get_version
              run: echo "version=$(grep "version" cargo.toml | head -n1 | cut -d '"' -f2)" >> $github_output

            - name: release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ steps.get_version.outputs.version }}
                  files: compressed/*/*
              env:
                  github_token: ${{ secrets.gh_token }}

            - name: install node
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  registry-url: "https://registry.npmjs.org"

            - name: publish to npm
              run: |
                  cd pkg
                  cp ../readme.md .
                  jq '.version = "${{ steps.get_version.outputs.version }}"' package.json > tmp && mv tmp package.json
                  npm publish
              env:
                  node_auth_token: ${{ secrets.npm_token }}
